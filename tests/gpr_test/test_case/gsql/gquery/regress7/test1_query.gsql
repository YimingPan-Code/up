#################################################
# GSQL language ListAccum declaration           #
# positive test cases                           #
# Tester: Jing Qin                              #
#                                               #
# Details: 					#
# test global ListAccum declaration,		#
# default initial value, nested type,           #
# = and += operator		                #
#################################################

DROP QUERY listac_test1
create batch query listac_test1(VERTEX<members> seed) FOR GRAPH poc_graph {
	// test declaration with different type
	TYPEDEF tuple<STRING name, INT score> myTuple; 
	ListAccum<UINT> @@uintList;
	ListAccum<INT> @@intList;
	ListAccum<FLOAT> @@floatList;
	ListAccum<DOUBLE> @@doubleList;
	ListAccum<STRING> @@strList;
	ListAccum<STRING COMPRESS> @@strcomList;
	ListAccum<BOOL> @@boolList;
	ListAccum<VERTEX> @@vList;
	ListAccum<EDGE> @@eList;
	ListAccum<DATETIME> @@dateList;
	ListAccum<myTuple> @@tupleList;
	ListAccum<ListAccum<INT>> @@twoList;  // test declare ListAccum with nested ListAccum, depth is 2
	ListAccum<ListAccum<ListAccum<INT>>> @@threeList;  // test declare ListAccum with nested ListAccum, depth is 3
	DATETIME dt;
	// test declaration of more than one variables in the same line
	ListAccum<UINT> @@uint1, @@uint2;
        ListAccum<INT> @@int1, @@int2;
        ListAccum<FLOAT> @@float1, @@float2;
        ListAccum<DOUBLE> @@double1, @@double2;
        ListAccum<STRING> @@str1, @@str2;
        ListAccum<STRING COMPRESS> @@strcom1, @@strcom2;
        ListAccum<BOOL> @@bool1, @@bool2;
        ListAccum<VERTEX> @@v1, @@v2;
        ListAccum<EDGE> @@e1, @@e2;
        ListAccum<DATETIME> @@date1, @@date2;
        ListAccum<myTuple> @@tuple1, @@tuple2;
        ListAccum<ListAccum<INT>> @@two1, @@two2;  // test declare ListAccum with nested ListAccum, depth is 2
        ListAccum<ListAccum<ListAccum<INT>>> @@three1, @@three2;  // test declare ListAccum with nested ListAccum, depth is 3
	dt = to_datetime("2013-12-31 23:59:59");

	// test default initial value with print statement
	print @@uintList, @@intList, @@floatList, @@doubleList, @@strList, @@strcomList, @@boolList,
	      @@vList, 
        @@eList, 
        @@dateList, @@tupleList, @@twoList, @@threeList;
	print @@uint1, @@uint2;
	print @@int1, @@int2;
	print @@float1, @@float2;
	print @@double1, @@double2;
	print @@str1, @@str2;
	print @@strcom1, @@strcom2;
	print @@bool1, @@bool2;
	print @@v1, @@v2;
	print @@e1, @@e2;
	print @@date1, @@date2;
	print @@tuple1, @@tuple2;
	print @@two1, @@two2;
	print @@three1, @@three2;

	// test = operator, the right-hand is an expression
	@@uintList = [1];
	@@intList = [0];
	@@floatList = [0.1];
	@@doubleList = [1.1];
	@@strList = ["test"];
	@@strcomList = ["compress"];
	@@boolList = [true];
	@@vList = [seed];
	@@dateList = [dt];
	@@tupleList = [myTuple("Tiger", 10)];
	@@twoList = [[1, 2]];
	@@threeList = [[[1, 2, 3]]];

	// print result after = operation
        print @@uintList, @@intList, @@floatList, @@doubleList, @@strList, @@strcomList, @@boolList,
              @@vList, @@dateList, @@tupleList, @@twoList, @@threeList;

	// test = operator, the right-hand is ListAccum
	@@uint1 = @@uintList;
	@@int1 = @@intList;
	@@float1 = @@floatList;
	@@double1 = @@doubleList;
	@@str1 = @@strList;
	@@strcom1 = @@strcomList;
	@@bool1 = @@boolList;
	@@v1 = @@vList;
	@@date1 = @@dateList;
	@@tuple1 = @@tupleList;
	@@two1 = @@twoList;
	@@three1 = @@threeList;
	
	// print result after operation
	print @@uint1, @@int1, @@float1, @@double1, @@str1, @@strcom1, @@bool1,
	      @@v1, @@date1, @@tuple1, @@two1, @@three1;

	// test += operator in query block, the right-hand is an element
	@@uintList += 1;
	@@intList += 0;
	@@floatList += 0.1;
	@@doubleList += 1.1;
	@@strList += "test";
	@@strcomList += "compress";
	@@boolList += true;
	@@vList += seed;
	@@dateList += dt;
	@@tupleList += myTuple("Graph", 20);
	@@twoList += [2, 3];
	@@threeList += [[2, 3, 4]];

	// print result after += operation
        print @@uintList, @@intList, @@floatList, @@doubleList, @@strList, @@strcomList, @@boolList,
              @@vList, @@dateList, @@tupleList, @@twoList, @@threeList;

	// test += operator in query block, the right-hand is an expression
	@@uint2 += [0];
	@@int2 += [-1];
	@@float2 += [0.2];
	@@double2 += [2.2];
	@@str2 += ["test2"];
	@@strcom2 += ["compress2"];
	@@bool2 += [false];
	@@v2 += [seed];
	@@date2 += [dt];
	@@tuple2 += [myTuple("SQL", 6)];
	@@two2 += [[6, 7]];
	@@three2 += [[[5, 6, 7]]];

	// print result after += operation
	print @@uint2, @@int2, @@float2, @@double2, @@str2, @@strcom2, @@bool2,
	      @@v2, @@date2, @@tuple2, @@two2, @@three2;

	// test += operator in query block, the right-hand is ListAccum
	@@uint2 += @@uint1;
	@@int2 += @@int1;
	@@float2 += @@float1;
	@@double2 += @@double1;
	@@str2 += @@str1;
	@@strcom2 += @@strcom1;
	@@bool2 += @@bool1;
	@@v2 += @@v1;
	@@date2 += @@date1;
	@@tuple2 += @@tuple1;
	@@two2 += @@two1;
	@@three2 += @@three1;

        // print result after += operation
        print @@uint2, @@int2, @@float2, @@double2, @@str2, @@strcom2, @@bool2,
              @@v2, @@date2, @@tuple2, @@two2, @@three2; 

	L0 = {seed};
	// test += operator in select block (the right-hand is en element)
	L1 = select tgt
	     from L0: s - (member_work_company: e) - company: tgt
	     accum @@uintList += 0, @@intList += 7, @@floatList += e.industryId,
		   @@doubleList += e.positionId, @@strList += s.profileIndustryId,
		   @@strcomList += s.id, @@boolList += true, @@vList += tgt,
		   @@eList += e, @@dateList += dt, @@tupleList += myTuple(s.id, e.industryId),
		   @@twoList += [0, 5], @@threeList += [[1, 5], [2, 5]];

        // print result after += operation
        print @@uintList, @@intList, @@floatList, @@doubleList, @@strList, @@strcomList, @@boolList,
              @@vList, 
              @@eList, 
              @@dateList, @@tupleList, @@twoList, @@threeList;	
}

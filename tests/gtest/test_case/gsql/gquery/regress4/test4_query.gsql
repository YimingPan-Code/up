#################################################
# GSQL language AvgAccum	                #
# positive test cases                           #
# Tester: Jing Qin                              #
#                                               #
# Details:                                      #
# test AvgAccum as nested type			#
#################################################

DROP QUERY avgac_test4
create query avgac_test4(VERTEX<members> seed) FOR GRAPH poc_graph {
	MapAccum<INT, AvgAccum> @@avgMap;
	MapAccum<INT, AvgAccum> @avgmap;
	GroupByAccum<INT a, STRING b, AvgAccum avg1, AvgAccum avg2> @@avgGroup;
	GroupByAccum<INT c, STRING d, AvgAccum avg3, AvgAccum avg4> @avggroup;
	ArrayAccum<AvgAccum> @@avgArray[1];
	ArrayAccum<AvgAccum> @avgarray[1];
	
	L0 = {seed};
	// test MapAccum with nested AvgAccum
	@@avgMap += (1 -> 1);
	@@avgMap += (1 -> 2);
	print @@avgMap;
	L1 = select tgt
	     from L0: s - (member_work_company: e) - company: tgt
	     accum s.@avgmap += (2 -> 3);
	L2 = select tgt
	     from L0: s - (member_work_company: e) - company: tgt
	     accum s.@avgmap += (2 -> 3);
	print L0;

	// test GroupByAccum with nested AvgAccum
	@@avgGroup += (1, "a" -> 1, 2);
	@@avgGroup += (1, "a" -> 2, 2);
	print @@avgGroup;
	L3 = select tgt
	     from L0: s - (member_work_company: e) - company: tgt
	     accum s.@avggroup += (2, "b" -> 3, 4);
	L4 = select tgt
	     from L0: s - (member_work_company: e) - company: tgt
	     accum s.@avggroup += (2, "b" -> 4, 5);
	print L0;

	// test ArrayAccum with nested AvgAccum
	@@avgArray[0] += 3;
	@@avgArray[0] += 5;
	print @@avgArray;	
	L5 = select tgt
	     from L0: s - (member_work_company: e) - company: tgt
	     accum s.@avgarray[0] += 1;
	L6 = select tgt
	     from L0: s - (member_work_company: e) - company: tgt
	     accum s.@avgarray[0] += 5;
	print L0;
}

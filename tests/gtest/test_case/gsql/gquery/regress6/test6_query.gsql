##################################################
# GSQL language BitwiseAndAccum & BitwiseOrAccum #
# declaration                                    #
# positive test cases                            #
# Tester: Yong Tan                               #
#                                                #
# Details:                                       #
# test global BitwiseAndAccum & BitwiseOrAccum   #
# with mathematical operators                    #
##################################################

create query BitwiseAndOrAccum_test6() FOR GRAPH poc_graph api("v2") {
  // test declaration of global variable
  BitwiseAndAccum @@bwAndAccumVar; # default value = 64-bits of 1 = -1 (INT)
  BitwiseOrAccum  @@bwOrAccumVar;  # default value = 64-bits of 0 = 0 (INT))

  BitwiseAndAccum @@bwAndAccumVar1 = 170, @@bwAndAccumVar2 = 85;
  BitwiseOrAccum @@bwOrAccumVar1 = 240, @@bwOrAccumVar2 = 15;

  @@bwAndAccumVar = @@bwAndAccumVar1 + @@bwAndAccumVar2;
  @@bwOrAccumVar = @@bwOrAccumVar1 + @@bwOrAccumVar2;

  // test "+" operator
  print @@bwAndAccumVar;
  print @@bwOrAccumVar;

  @@bwAndAccumVar = @@bwAndAccumVar1 - @@bwAndAccumVar2;
  @@bwOrAccumVar = @@bwOrAccumVar1 - @@bwOrAccumVar2;

  // test "-" operator
  print @@bwAndAccumVar;
  print @@bwOrAccumVar;

  @@bwAndAccumVar = @@bwAndAccumVar1 * @@bwAndAccumVar2;
  @@bwOrAccumVar = @@bwOrAccumVar1 * @@bwOrAccumVar2;

  // test "*" operator
  print @@bwAndAccumVar;
  print @@bwOrAccumVar;

  @@bwAndAccumVar = @@bwAndAccumVar1 / @@bwAndAccumVar2;
  @@bwOrAccumVar = @@bwOrAccumVar1 / @@bwOrAccumVar2;

  // test "/" operator
  print @@bwAndAccumVar;
  print @@bwOrAccumVar;

  @@bwAndAccumVar = @@bwAndAccumVar1 & @@bwAndAccumVar2;
  @@bwOrAccumVar = @@bwOrAccumVar1 & @@bwOrAccumVar2;

  // test "&" operator
  print @@bwAndAccumVar;
  print @@bwOrAccumVar;

  @@bwAndAccumVar = @@bwAndAccumVar1 | @@bwAndAccumVar2;
  @@bwOrAccumVar = @@bwOrAccumVar1 | @@bwOrAccumVar2;

  // test "|" operator
  print @@bwAndAccumVar;
  print @@bwOrAccumVar;

  @@bwAndAccumVar = @@bwAndAccumVar1 >> 2;
  @@bwOrAccumVar = @@bwOrAccumVar1 >> 2;

  // test ">>" operator
  print @@bwAndAccumVar;
  print @@bwOrAccumVar;

  @@bwAndAccumVar = @@bwAndAccumVar1 << 2;
  @@bwOrAccumVar = @@bwOrAccumVar1 << 2;

  // test "<<" operator
  print @@bwAndAccumVar;
  print @@bwOrAccumVar;
}


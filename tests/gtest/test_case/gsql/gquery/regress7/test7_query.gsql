#################################################
# GSQL language ListAccum		        #
# positive test cases                           #
# Tester: Jing Qin                              #
#                                               #
# Details: 					#
# local ListAccum functions,			#
# as parameter of expression function		# 
#################################################

DROP QUERY listac_test7
create query listac_test7(VERTEX<members> seed) FOR GRAPH poc_graph {
	TYPEDEF tuple<STRING name, INT score> myTuple; 
	ListAccum<UINT> @uintList;
	ListAccum<INT> @intList;
	ListAccum<FLOAT> @floatList;
	ListAccum<DOUBLE> @doubleList;
	ListAccum<STRING> @strList;
	ListAccum<STRING COMPRESS> @strcomList;
	ListAccum<BOOL> @boolList;
	ListAccum<VERTEX> @vList;
	ListAccum<EDGE> @eList;
	ListAccum<DATETIME> @dateList;
	ListAccum<myTuple> @tupleList;
	ListAccum<ListAccum<INT>> @twoList;
	ListAccum<ListAccum<ListAccum<INT>>> @threeList;
	DATETIME dt;
	DATETIME dd;
	EDGE edge1;
	EDGE edge2;
	VERTEX vertex1;
	VERTEX vertex2;
	DOUBLE result;
	dt = to_datetime("2016-12-31 23:59:59");
	dd = to_datetime("2011-12-12 23:11:11");

	L0 = {seed};
	L1 = select tgt
	     from L0: s - (member_work_company: e) - company: tgt
	     accum s.@uintList += 0, s.@intList += tgt.nCount, s.@floatList += e.industryId,
		   s.@doubleList += e.positionId, s.@strList += tgt.company_name,
		   s.@strcomList += tgt.id, s.@boolList += tgt.label, s.@vList += tgt,
		   s.@eList += e, s.@dateList += dt, s.@tupleList += myTuple(s.id, tgt.nCount),
		   s.@twoList += [0, 5], s.@threeList += [[1, 5]], edge1 = e, vertex1 = tgt, vertex2 = s;

	L2 = select tgt
	     from L1: s - (member_work_company: e) - members: tgt
	     where tgt.id == "m1"
	     accum edge2 = e;

	// print size of each ListAccum using size() function
	print L0 [L0.@uintList.size(), L0.@intList.size(), L0.@floatList.size(), L0.@doubleList.size(), L0.@strList.size(),
		L0.@strcomList.size(), L0.@boolList.size(), L0.@vList.size(), L0.@eList.size(), L0.@dateList.size(),
		L0.@tupleList.size(), L0.@twoList.size(), L0.@threeList.size()];

	// print the first element (valid) of each ListAccum using get() function
	print L0 [L0.@uintList.get(0), L0.@intList.get(0), L0.@floatList.get(0), L0.@doubleList.get(0), L0.@strList.get(0),
		L0.@strcomList.get(0), L0.@vList.get(0), L0.@eList.get(0), L0.@dateList.get(0),
		L0.@tupleList.get(0), L0.@twoList.get(0), L0.@threeList.get(0)/*, L0.@boolList.get(0)*/];

	// get() function with index out of bound, should return default value
	print L0 [L0.@uintList.get(1), L0.@intList.get(1), L0.@floatList.get(1), L0.@doubleList.get(1), L0.@strList.get(1),
                L0.@strcomList.get(1), L0.@boolList.get(1), L0.@vList.get(1), L0.@eList.get(1), L0.@dateList.get(1),
                L0.@tupleList.get(1), L0.@twoList.get(1), L0.@threeList.get(1)];

	// print the return value of contains() function of each ListAccum
	print L0 [L0.@uintList.contains(0), L0.@uintList.contains(1), L0.@intList.contains(1), L0.@intList.contains(2),
		L0.@floatList.contains(1), L0.@floatList.contains(2), L0.@doubleList.contains(2), L0.@doubleList.contains(1),
		L0.@strList.contains("com1"), L0.@strList.contains("com2"), L0.@strcomList.contains("c1"), L0.@strcomList.contains("google"),
		L0.@boolList.contains(true), L0.@boolList.contains(false), L0.@vList.contains(vertex1), L0.@vList.contains(vertex2),
		L0.@eList.contains(edge1), L0.@eList.contains(edge2), L0.@dateList.contains(dt), L0.@dateList.contains(dd),
		L0.@tupleList.contains(myTuple("m3", 1)), L0.@tupleList.contains(myTuple("m2", 2)),
		L0.@twoList.contains([0, 5]), L0.@twoList.contains([1]), L0.@threeList.contains([[1, 5]]), L0.@threeList.contains([[2]])];

	// test update() function
	L3 = select tgt
	     from L0: s - (member_work_company: e) - company: tgt
	     post-accum L0.@uintList.update(0, 1), L0.@intList.update(0, 0), L0.@floatList.update(0, 0),
		L0.@doubleList.update(0, 3), L0.@strList.update(0, "changed"), L0.@strcomList.update(0, "changed"),
		L0.@boolList.update(0, false), L0.@vList.update(0, vertex2), L0.@eList.update(0, edge2), 
		L0.@dateList.update(0, dd), L0.@tupleList.update(0, myTuple("changed", 1)),
		L0.@twoList.update(0, [0, 0]), L0.@threeList.update(0, [[1, 1]]);
	
	// print the first element of each ListAccum after update() function 
	print L0 [L0.@uintList.get(0), L0.@intList.get(0), L0.@floatList.get(0), L0.@doubleList.get(0), L0.@strList.get(0),
		L0.@strcomList.get(0), L0.@boolList.get(0), L0.@vList.get(0), L0.@eList.get(0), L0.@dateList.get(0),
		L0.@tupleList.get(0), L0.@twoList.get(0), L0.@threeList.get(0)];

	// test clear() function
	L4 = select tgt
	     from L0: s - (member_work_company: e) - company: tgt
	     post-accum L0.@uintList.clear(), L0.@intList.clear(), L0.@floatList.clear(), 
		L0.@doubleList.clear(), L0.@strList.clear(), L0.@strcomList.clear(), 
		L0.@boolList.clear(), L0.@vList.clear(), L0.@eList.clear(), 
		L0.@dateList.clear(), L0.@tupleList.clear(), L0.@twoList.clear(), 
		L0.@threeList.clear();

	// print the size of each ListAccum after clear() funtion to see if ListAccum has already be cleared
	print L0 [L0.@uintList.size(), L0.@intList.size(), L0.@floatList.size(), L0.@doubleList.size(), L0.@strList.size(),
		L0.@strcomList.size(), L0.@boolList.size(), L0.@vList.size(), L0.@eList.size(), L0.@dateList.size(),
		L0.@tupleList.size(), L0.@twoList.size(), L0.@threeList.size()];

	// test ListAccum as the parameter of expression function
	// here ListAccum<DOUBLE> is used
	L5 = select tgt
	     from L0: s - (member_work_company: e) - company: tgt
	     accum s.@doubleList = [3, 4, 1, 5, 11, 200, -1, 0]
	     post-accum result = findMaxOfListAccum(s.@doubleList);
	print result;	
}

CREATE QUERY wcc_fast(SET<STRING> v_type, SET<STRING> e_type, INT output_limit, BOOL print_accum=TRUE, STRING attr = "", STRING file_path="", BOOL test_mode=FALSE){
/*
 * This query identifies connected components using the algorithm found in section 5.2 of Qin et al.
 * 2014: http://www-std1.se.cuhk.edu.hk/~hcheng/paper/SIGMOD2014qin.pdf
 */
        MapAccum<VERTEX, VERTEX> @@parents_map;
        MapAccum<VERTEX, MinAccum<VERTEX>> @@temp_parents_map;
        SumAccum<INT> @subnode_count;
        MapAccum<VERTEX, AndAccum<BOOL>> @@star_map;
        SumAccum<INT> @@parent_changed_count;
        FILE f("/tmp/fake");

        MapAccum<INT, INT> @@comp_sizes_map; # we'll compile component sizes here. each component has 1 parent, which will be key in map
        MinAccum<INT> @cid = 0;   # community id for PRINT
        MapAccum<INT, SumAccum<INT>> @@test_map;

        all_v = {v_type};

        #### FOREST INITIALIZATION ####
        # Step 1: For each node v, let parent p(v) = min ID of v and each of its neighbors.
        # Need two SELECTs because the one with edge will not update parent for singletons.
        all_v = SELECT v FROM all_v:v
                POST-ACCUM
                    @@temp_parents_map += (v -> v), @@parent_changed_count += 1
                ;

        # This SELECT will not return isolated singletons because they won't have any edges
        T1 =    SELECT v FROM all_v:v -(e_type:e)-> :u
                ACCUM
                    @@temp_parents_map += (v -> u)
                ;

        @@parents_map += @@temp_parents_map;

        # Step 2: For each node v, count the number of its subnodes u such that u != v and p(u) = v. Let c(v) = the number of subnodes of vertex v.
        T1 =    SELECT v FROM all_v:v -(e_type:e)-> :u
                ACCUM
                    IF (@@parents_map.get(u) == v) THEN
                        v.@subnode_count += 1
                    END
                ;

        # Step 3: Eliminate non-isolated singletons - that is, all vertices v such that p(v) = v and c(v) = 0, and there exists another vertex u such that (u, v) is an edge in the graph
        @@temp_parents_map.clear();
        non_iso_singletons =    SELECT v FROM all_v:v -(e_type:e)-> :u
                                WHERE
                                    @@parents_map.get(v) == v AND v.@subnode_count == 0
                                ACCUM
                                    @@temp_parents_map += (v -> u)
                                ;
        @@parents_map += @@temp_parents_map;


        #### ITERATIVELY UPDATE PARENTS UNTIL EACH COMPONENT IS A SINGLE STAR ####
        WHILE @@parent_changed_count > 0 DO
            #### STAR DETECTION ####
            @@star_map.clear();

            # Rule 1: Let s(v) = 1 if p(v) = p(p(v))
            # Only root and depth 1 vertices will have s(v) = 1. Everything else will have s(v) = 0.
            all_v = SELECT v FROM all_v:v
                    POST-ACCUM
                        VERTEX parent = @@parents_map.get(v),
                        IF parent == @@parents_map.get(parent) THEN
                            @@star_map += (v -> true)
                        ELSE
                            @@star_map += (v -> false)
                        END
                    ;

            # Rule 2: If s(v) = 1 but v has a grandchild u such that s(u) = 0, then s(v) = 0. This will end up updating root vertices. 
            not_star_roots =    SELECT u FROM all_v:u
                                WHERE
                                    @@star_map.get(u) == false
                                POST-ACCUM
                                    @@star_map += (@@parents_map.get(@@parents_map.get(u)) -> false)
                                ;

            # Rule 3: If s(p(v)) = 0, then s(v) = 0. This will end up updating vertices at depth 1 of trees.
            not_star_depth1 =   SELECT u FROM all_v:u
                                WHERE
                                    @@star_map.get(@@parents_map.get(u)) == false
                                POST-ACCUM
                                    @@star_map += (u -> false)
                                ;


            #### STAR HOOKING ####
            # Step 1: Conditional star hooking
            @@temp_parents_map.clear();

            connected_nodes =   SELECT v FROM all_v:v -(e_type:e)-> :u
                                ACCUM
                                    VERTEX v_parent = @@parents_map.get(v),
                                    VERTEX u_parent = @@parents_map.get(u),
                                    IF @@star_map.get(v) == true AND v_parent != u_parent THEN
                                        IF (getvid(u_parent) < getvid(v_parent)) THEN
                                            @@temp_parents_map += (v_parent -> u_parent)
                                        END
                                    END
                                ;


            # Update the parent for star roots that need to be hooked onto larger tree
            # Additionally, these roots are no longer stars, nor are the nodes they hook onto,
            # so update the star map before unconditional hooking. 
            star_roots =    SELECT v FROM all_v:v
                            WHERE
                                @@star_map.get(v) == true AND @@parents_map.get(v) == v
                            ;

            merged_roots =  SELECT v FROM star_roots:v
                            WHERE
                                @@temp_parents_map.containsKey(v)
                            POST-ACCUM
                                @@star_map += (v -> false),
                                @@star_map += (@@temp_parents_map.get(v) -> false)
                            ;
            @@parents_map += @@temp_parents_map;


            # We need to update the children of stars that have been merged as well - they are now longer part of stars.
            merged_children =   SELECT v FROM all_v:v
                                WHERE
                                    @@star_map.get(v) == true AND @@star_map.get(@@parents_map.get(v)) == false
                                POST-ACCUM
                                    @@star_map += (v -> false)
                                ;

            # Step 2: Unconditional star hooking. Nearly identical, but remaining star roots must be merged,
            # so we skip the POST-ACCUM in the connected_nodes SELECT statement.
            # We can also start from original values instead of all_v because each of these values should be a subset of the previous vset.
            @@temp_parents_map.clear();

            connected_nodes =   SELECT v FROM all_v:v -(e_type:e)-> :u
                                ACCUM
                                    VERTEX v_parent = @@parents_map.get(v),
                                    VERTEX u_parent = @@parents_map.get(u),
                                    IF @@star_map.get(v) == true AND v_parent != u_parent THEN
                                            @@temp_parents_map += (v_parent -> u_parent)
                                    END
                                ;

            star_roots =    SELECT v FROM star_roots:v
                            WHERE
                                @@star_map.get(v) == true AND @@parents_map.get(v) == v
                            ;
            merged_roots =  SELECT v FROM star_roots:v
                            WHERE
                                @@temp_parents_map.containsKey(v)
                            POST-ACCUM
                                @@star_map += (v -> false),
                                @@star_map += (@@temp_parents_map.get(v) -> false)
                            ;
            @@parents_map += @@temp_parents_map;


            merged_children =   SELECT v FROM all_v:v # Same efficiency question as above
                                WHERE
                                    @@star_map.get(v) == true AND @@star_map.get(@@parents_map.get(v)) == false
                                POST-ACCUM
                                    @@star_map += (v -> false)
                                ;

            #### POINTER UPDATES ####
            # We will now reduce the depth of the remaining trees by changing making each vertex's grandparent
            # its new parent.
            @@parent_changed_count = 0;
            all_v = SELECT v FROM all_v:v
                    POST-ACCUM
                        VERTEX parent = @@parents_map.get(v),
                        VERTEX grandparent = @@parents_map.get(parent),
                        IF parent != grandparent THEN
                            @@parent_changed_count += 1,
                            @@parents_map += (v -> grandparent)
                        END
                    ;
        END;

        IF file_path != "" THEN
            f.println("Vertex_ID", "Component_ID");
        END;

         all_v = SELECT v FROM all_v:v
                POST-ACCUM 
                IF attr != "" THEN v.setAttr(attr,getvid(@@parents_map.get(v))) END,
                IF print_accum OR test_mode THEN v.@cid = getvid(@@parents_map.get(v)), 
                    @@comp_sizes_map += (getvid(@@parents_map.get(v)) -> 1) END,
                IF file_path != "" THEN f.println(v, getvid(@@parents_map.get(v))) END
                LIMIT output_limit;
                

    IF print_accum THEN
        PRINT @@comp_sizes_map.size() AS num_components, @@comp_sizes_map AS comp_sizes;
        PRINT all_v[all_v.@cid];
    END;
  
    IF test_mode THEN
      FOREACH (k, v) IN @@comp_sizes_map DO
          @@test_map += (v -> 1);
      END;
      PRINT @@test_map;
    END;
}

CREATE QUERY shortest_ss_no_wt (VERTEX source, SET<STRING> e_type, INT output_limit, BOOL print_accum = TRUE, STRING attr = "", STRING file_path = "", BOOL display = FALSE, BOOL test_mode = FALSE){
/* This query is Single-Source Shortest Path without weights on edges. It calculates the shortest distance from the given vertex source to all other connected vertices, and shows one shortest path between them.   
The JSON version also show visualization of the network. 
The attribute version only store the distance into attribute, not the path.
*/

        FILE f("/tmp/fake");
        MinAccum<INT> @dis;
        MinAccum<INT> @pred_score;
        OrAccum @visited;
        ListAccum<VERTEX> @path;
        SetAccum<EDGE> @@edgeSet;

  ##### Initialization  #####
        Source = {source};
        Source = SELECT s 
                 FROM Source:s
                 ACCUM s.@visited += true, 
                       s.@dis = 0,
                       s.@pred_score = GSQL_INT_MAX,
                       s.@path = s; 
  
        ResultSet = {source};

  ##### Calculate distances and paths #####
        WHILE(Source.size()>0) DO
                Source = SELECT t
                         FROM Source:s -(e_type:e)-> :t
                         WHERE t.@visited == false
                         ACCUM IF getvid(s) < t.@pred_score THEN
                               t.@dis = s.@dis + 1,
                               t.@path = s.@path,
                               t.@pred_score += getvid(s)
                          END;
                
                Source = SELECT s FROM Source:s
                          POST-ACCUM s.@path = s.@path + [s], s.@visited = true;
                               
  
                ResultSet = ResultSet UNION Source;
        END;

        IF file_path != "" THEN
            f.println("Vertex_ID","Distance","Shortest_Path");
        END;

        ResultSet = SELECT s FROM ResultSet:s 
                    POST-ACCUM 
                        IF attr != "" THEN s.setAttr(attr, s.@dis) END,
                        IF file_path != "" THEN f.println(s, s.@dis, s.@path) END
                    LIMIT output_limit;

        
        IF print_accum THEN
            
            PRINT ResultSet[ResultSet.@dis, ResultSet.@path];
            IF display THEN

                ResultSet = SELECT s FROM ResultSet:s -(e_type:e)-> :t
                ACCUM @@edgeSet += e;
                PRINT @@edgeSet;
            END;
        END;
  
        IF test_mode THEN
          PRINT ResultSet[ResultSet.@dis];
        END;
}

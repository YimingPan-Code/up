CREATE QUERY shortest_ss_pos_wt (VERTEX source, SET<STRING> e_type, STRING weight, INT output_limit, BOOL print_accum = TRUE, STRING attr = "", STRING file_path = "", BOOL display = FALSE, BOOL test_mode = FALSE){
/* The Bellman-Ford algorithm for single-Source Shortest Path 
   on directed/undirected graph with positive weight.
   It will not detect negative cycle in this algorithm. 
*/
        TYPEDEF TUPLE<FLOAT dist, VERTEX pred> Path_Tuple;    
        HeapAccum<Path_Tuple>(1, dist ASC) @minPath;
        ListAccum<VERTEX> @path;                 # shortest path FROM source
        SetAccum<EDGE> @@edgeSet;               # list of all edges, if display is needed
        OrAccum @visited;
        FILE f("/tmp/fake");
        STRING sourceName;
        INT iter;
        BOOL negativeCycle;
        total = {source};                       # the connected vertices
        start = {source};

              
        ##### Get the connected vertices
        start = SELECT s
                FROM start:s
                ACCUM s.@minPath += Path_Tuple(0, s),
                      s.@visited = TRUE,
                      s.@path += s;
        WHILE start.size() > 0 DO
                start = SELECT t
                        FROM start:s -(e_type:e)-> :t
                        WHERE NOT t.@visited
                        ACCUM t.@visited = TRUE;
                total = total UNION start;
        END;
        
  ##### Do V-1 iterations: Consider whether each edge lowers the best-known distance.
        iter = total.size() - 1;    # the max iteration is V-1
        WHILE TRUE LIMIT iter DO 
                tmp = SELECT s
                      FROM total:s -(e_type:e)-> :t
                      ACCUM 
                            IF s.@minPath.size()>0 AND s.@minPath.top().dist < GSQL_INT_MAX THEN
                                t.@minPath += Path_Tuple(s.@minPath.top().dist + e.getAttr(weight, "FLOAT"), s)
                            END;     
        END;
        
  ##### Calculate the paths #####
        start = {source};
        tmp = SELECT s
              FROM total:s
              WHERE s != source
              ACCUM s.@visited = FALSE;
        WHILE start.size() > 0 LIMIT iter DO # Limit the number of hops
                start = SELECT t
                        FROM start:s -(e_type:e)-> :t
                        WHERE NOT t.@visited
                        ACCUM IF s == t.@minPath.top().pred THEN 
                                  t.@visited = TRUE,
                                  t.@path += s.@path,
                                  t.@path += t
                              END;
        END;
  
      
        IF file_path != "" THEN
          f.println("Vertex_ID","Distance","Shortest_Path");
        END;
  
        total = SELECT s FROM total:s
                POST-ACCUM 
                  IF attr != "" THEN s.setAttr(attr, s.@minPath.top().dist) END,
                  IF file_path != "" THEN f.println(s, s.@minPath.top().dist, s.@path) END
                LIMIT output_limit;
                  
        IF print_accum THEN
          PRINT total[total.@minPath.top().dist, total.@path];
          IF display THEN
              tmp = SELECT s
                      FROM total:s -(e_type:e)-> :t
                      ACCUM @@edgeSet += e;
              PRINT @@edgeSet;
          END;
        END;
  
        IF test_mode THEN
          PRINT total[total.@minPath.top().dist];
        END;
}

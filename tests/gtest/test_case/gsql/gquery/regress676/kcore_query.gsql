CREATE QUERY kcore(STRING v_type, STRING e_type, INT k_min = 0, INT k_max = -1, BOOL print_accum = TRUE, STRING attr = "", STRING file_path = "", BOOL show_membership = FALSE, BOOL show_shells=FALSE){ 
/* An implementation of Algorithm 2 in
 * Scalable K-Core Decomposition for Static Graphs Using a Dynamic Graph Data Structure,
 * Tripathy et al., IEEE Big Data 2018.
 
 This query is only supported for a single edge type at the moment (8/13/20)
 */
	SumAccum<INT> @deg;        // The number of edges v has to active vertices.
  SumAccum<INT> @core;       // The core level of vertex v
  FILE f("/tmp/fake");
  INT k;             			    
	k = k_min;				      
	
	active = {v_type.*};
	active = SELECT v                  // Initialize @deg
	    FROM active:v
	    POST-ACCUM v.@deg += v.outdegree(e_type);
  
  
	Q = active;
	WHILE active.size() > 0 AND (k_max == -1 OR k < k_max) DO
      deleted = SELECT v FROM active:v
          WHERE v.@deg <= k
          ACCUM v.@core += k;
  
      active = active MINUS deleted;
  
	    IF deleted.size() > 0 THEN                // "Remove adjacent edges"         
	        U = SELECT u
	            FROM deleted:u -(e_type:e)-> :v
	            ACCUM  v.@deg += -1;  // Actually, reduce degree of vertices
	    ELSE 
  
          // Show vertices which did not satisfy kcore condition at a value of k
	        IF show_shells THEN 
              shells = Q MINUS active;
              PRINT k, shells; 
          END;
          IF active.size() > 0THEN
              Q = active;
          END;
        
          //show all vertices which satisfied the condition at k.
          IF show_membership THEN 
            PRINT k, Q as members;
          END;
  
          k = k + 1;
	    END;
  END;
  
  IF file_path != "" THEN
    f.println("Vertex", "Core");
  END;
  
  IF file_path != "" OR attr != "" THEN
    Seed = {v_type.*};
    Seed = SELECT s FROM Seed:s
            POST-ACCUM
              IF file_path != "" THEN f.println(s, s.@core) END,
              IF attr != "" THEN s.setAttr(attr, s.@core) END;
  
  END;
  
  IF print_accum THEN
    PRINT k, Q.size() as core_size, Q as max_core;
  END;
	
}

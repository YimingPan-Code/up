CREATE QUERY shortest_ss_any_wt (VERTEX source, SET<STRING> v_type, SET<STRING> e_type, STRING weight, INT output_limit, BOOL print_accum=TRUE, STRING dist_attr = "", STRING file_path = "", BOOL display=FALSE, BOOL test_mode = FALSE){
/* The Bellman-Ford algorithm for single-Source Shortest Path with edge weights,
 possibly negative.
 If any loop in the graph has a net negative weight, the algorithm will exit.
*/

        FILE f("/tmp/fake");
        MinAccum<FLOAT> @dist;                      # best-known shortest distance FROM source
        ListAccum<VERTEX> @path;                     # best-known path FROM source
        OrAccum @visited = false;                   # whether this vertex has been visited
        OrAccum @@hasNegLoop;                       # Indicates a negative loop is found
        SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed
        STRING sourceName;
        STRING errMsg = "There is a loop with negative length. Shortest path is undefined.";
        INT maxVal = 1000000000;                   # Should be larger than any possible path
        EXCEPTION negLoop (40999);
        VSET = {v_type};
        Source = {source}; 

  ##### Initialization: Set the best-known distance to a maxValue (pseudo-infinite)

        VSET = SELECT s FROM VSET:s
               POST-ACCUM s.@dist = maxVal,
                          s.@path = s;
        Source = SELECT s FROM Source:s               # The distance FROM s to itself is 0.
                 POST-ACCUM s.@dist = 0,
                            s.@visited = true;
  
  ##### Do N-1 iterations: Consider whether each edge lowers the best-known distance.
        FOREACH i IN RANGE[1, VSET.size()-1] DO
                VSET = SELECT s
                       FROM VSET:s -(e_type:e)-> :t
                       ACCUM IF s.@visited THEN
                                IF s.@dist + e.getAttr(weight, "FLOAT") < t.@dist THEN
                                        t.@dist = s.@dist + e.getAttr(weight, "FLOAT"),             # @dist is a MinAccum
                                        t.@path = s.@path + [t]
                                END,
                                t.@visited += true
                             END;
        END;
             
  ##### Check for loops with net negative weight #####
        VSET = SELECT s
               FROM VSET:s -(e_type:e)-> :t
               ACCUM @@hasNegLoop +=s.@dist + e.getAttr(weight, "FLOAT") < t.@dist;
         
        IF @@hasNegLoop THEN        
                RAISE negLoop (errMsg);
        END;
  
        IF file_path != "" THEN
          f.println("Vertex_ID", "Distance", "Shortest_Path");
        END;
  
  ##### Print the results #####
          VSET = SELECT s
               FROM VSET:s
               POST-ACCUM 
                  IF dist_attr != "" THEN s.setAttr(dist_attr,s.@dist) END, 
                  IF file_path != "" THEN f.println(s, s.@dist, s.@path) END
              LIMIT output_limit;
                
        
        IF print_accum THEN
          PRINT VSET[VSET.@dist, VSET.@path];
           IF display THEN
            VSET = SELECT s
                  FROM VSET:s -(e_type:e)-> :t
                    ACCUM @@edgeSet += e;
            PRINT @@edgeSet;
           END;
       END;
  
        IF test_mode THEN
          PRINT VSET[VSET.@dist];
        END;
}

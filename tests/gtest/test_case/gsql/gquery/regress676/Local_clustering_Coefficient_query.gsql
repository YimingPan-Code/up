CREATE QUERY Local_clustering_Coefficient(STRING v_type, STRING e_type,INT top_k=100,BOOL print_accum = True, STRING result_attr = "",
  STRING file_path = "", BOOL display_edges = FALSE){ 
   /*
   The Local Clustering Coefficient algorithm computes the local clustering coefficient 
   for each node in the graph. 
   lcc = Number_trangles/((n-1)n/2)
   Here n is the outdegreeof vertex.
  Parameters:
  v_type: vertex types to traverse                 print_accum: print JSON output
  e_type: edge types to traverse                   result_attr: INT attr to store results to
  top_k: report only this many top scores          file_path: file to write CSV output to
  display_edges: output edges for visualization
   */

  TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> VertexScore;
  HeapAccum<VertexScore>(top_k, score DESC) @@topScores;
  SumAccum<FLOAT> @tri; #number of trangles
  SumAccum<FLOAT> @lcc; #lcc value
  SetAccum<int> @neighbors; #neighbors set
  OrAccum @self_con; #check if the vertex is self-connect
  SetAccum<EDGE> @@edgeSet;
  FILE f ("/tmp/fake");
  # Here we compute the intersection for 2 points on the triangle.

  Start = {v_type};
  Start = SELECT s FROM Start:s-(e_type)-v_type:t
          ACCUM 
              IF getvid(s) != getvid(t) THEN 
                  t.@neighbors += getvid(s)
              ELSE   
                  t.@self_con+=TRUE 
              END;# check id the vertex is self-connect

  Start = SELECT s FROM Start:s-(e_type)-v_type:t
          WHERE s.outdegree(e_type)>1
          ACCUM 
              s.@tri+=COUNT((s.@neighbors INTERSECT t.@neighbors))
          POST-ACCUM 
              IF s.@self_con  AND s.outdegree(e_type)<3 THEN 
                      s.@lcc+=0
              ELSE IF s.@self_con AND s.outdegree(e_type)>2 THEN 
                      s.@lcc+= (((s.@tri+1-s.outdegree(e_type)))/((s.outdegree(e_type)-2)*(s.outdegree(e_type)-1)))
              ELSE 
                      s.@lcc+= ((s.@tri)/((s.outdegree(e_type)-0)*(s.outdegree(e_type)-1)))
              END;

  #output
  Start = SELECT s FROM Start:s
			# Calculate Closeness Centrality for each vertex
			    POST-ACCUM 
					    IF result_attr != "" THEN s.setAttr(result_attr, s.@lcc) END,
					    IF print_accum THEN @@topScores += VertexScore(s, s.@lcc) END,
					    IF file_path != "" THEN f.println(s, s.@lcc) END;
  IF file_path != "" THEN
			f.println("Vertex_ID", "lcc");
	END;

	IF print_accum THEN
		PRINT @@topScores AS top_scores;
		IF display_edges THEN
			PRINT Start[Start.@lcc];
			Start = SELECT s
			FROM Start:s -(e_type:e)->:t
				ACCUM @@edgeSet += e;
			PRINT @@edgeSet;
		END;
	END;
}

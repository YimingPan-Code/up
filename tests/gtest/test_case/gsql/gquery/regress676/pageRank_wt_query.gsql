CREATE QUERY pageRank_wt (SET<STRING> v_type, SET<STRING> e_type, STRING weight, INT output_limit, FLOAT max_change=0.001, INT max_iter=25, FLOAT damping=0.85, BOOL print_accum = TRUE, STRING file_path="", STRING attr="", BOOL display = FALSE){
# Compute the pageRank score for each vertex in the GRAPH, using weighted edge.
# In each iteration, compute a score for each vertex:
#   score = (1-damping) + damping*sum(received scores FROM its neighbors).
# The pageRank algorithm stops when either of the following is true:
#  a) it reaches max_iter iterations;
#  b) the max score change for any vertex compared to the last iteration <= max_change.

TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
HeapAccum<Vertex_Score>(output_limit, score DESC) @@topScores;
MaxAccum<FLOAT> @@maxDiff = 9999; # max score change in an iteration
SumAccum<FLOAT> @received_score = 0; # sum of scores each vertex receives FROM neighbors
SumAccum<FLOAT> @score = 1;   # Initial score for every vertex is 1.
SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed
SumAccum<FLOAT> @total_weight;
FILE f("/tmp/fake");
  
Start = {v_type};   #  Start with all vertices of specified type(s)
        
        
Start = SELECT s                
            FROM Start:s -(e_type:e) -> :t
            ACCUM s.@total_weight += e.getAttr(weight, "FLOAT");  # Calculate the total weight for each vertex

        WHILE @@maxDiff > max_change LIMIT max_iter DO
                @@maxDiff = 0;
                V = SELECT s
                    FROM Start:s -(e_type:e)-> :t
                    ACCUM t.@received_score += s.@score * e.getAttr(weight, "FLOAT") / s.@total_weight
                    POST-ACCUM s.@score = (1.0-damping) + damping * s.@received_score,
                               s.@received_score = 0,
                               @@maxDiff += abs(s.@score - s.@score');
        END;

        IF file_path != "" THEN
          f.println("Vertex_ID", "PageRank");
        END;
  
        V = SELECT s FROM Start:s
            POST-ACCUM 
                        IF attr != "" THEN s.setAttr(attr, s.@score) END,
                        IF print_accum THEN @@topScores += Vertex_Score(s, s.@score) END,
                        IF file_path != "" THEN f.println(s, s.@score) END
            LIMIT output_limit;

       IF print_accum THEN
            PRINT @@topScores as top_scores;
       END;


      IF display THEN
        PRINT Start[Start.@score];
        Start = SELECT s
        FROM Start:s -(e_type:e)-> :t
                ACCUM @@edgeSet += e;
        PRINT @@edgeSet as edge_set;
    END;
}

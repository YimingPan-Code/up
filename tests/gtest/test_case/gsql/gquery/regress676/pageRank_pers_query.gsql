CREATE QUERY pageRank_pers(SET<VERTEX> source, STRING e_type, INT output_limit, FLOAT max_change=0.001, INT max_iter=25, FLOAT damping = 0.85, STRING attr = "", STRING file_path = "", BOOL print_accum = TRUE){
# Compute the pageRank score for each vertex in the GRAPH, given a set of source vertices
# In each iteration, compute a score for activated vertices if they are source vertices:
#   score = (1-damping) + damping*sum(received scores FROM its neighbors).
# If they are not source vertices, then score = damping*sum(received scores FROM its neighbors).
# The personalized pageRank algorithm stops when either of the following is true:
#  a) it reaches max_iter iterations;
#  b) the max score change for any vertex compared to the last iteration <= maxChange.
  
# pageRank_pers only supports a single edge at the moment (8/13/2020).

  TYPEDEF TUPLE<VERTEX vertex_id, FLOAT score> Vertex_Score;
  HeapAccum<Vertex_Score>(output_limit, score DESC) @@topScores;
  MaxAccum<FLOAT> @@maxDiff = 9999; # max score change in an iteration
  SumAccum<FLOAT> @received_score = 0; # sum of scores each vertex receives FROM neighbors
  SumAccum<FLOAT> @score = 0;   # Initial score for every vertex is 0
  SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed
  OrAccum @is_source;  
  FILE f("/tmp/fake");
  
        IF file_path != "" THEN
          f.println("Vertex_ID", "PageRank");
        END;
       
        Start = {source};   #  Start with a set of vertices
        Start = SELECT s
                FROM  Start:s
                ACCUM s.@score = 1,   # Only set score of source vertices to 1
                      s.@is_source = true;
        Total = Start;
        WHILE @@maxDiff > max_change LIMIT max_iter DO
              @@maxDiff = 0;
              V_tmp = SELECT t      # Only update score for activated vertices
                      FROM Start:s -(e_type:e)-> :t
                      ACCUM t.@received_score += s.@score/(s.outdegree(e_type));
              T = Start UNION V_tmp;
              Start = SELECT s
                      FROM T:s
                      POST-ACCUM
                          # For source vertices, if it's activated, then add damping; if not activated, do not need to update
                          IF s.@is_source == true
                          THEN s.@score = (1.0-damping) + damping * s.@received_score
                          ELSE s.@score = damping * s.@received_score
                          END,
                          s.@received_score = 0,
                          @@maxDiff += abs(s.@score - s.@score');
              Total = Total UNION T; 
        END; # END WHILE loop
        
      Total = Select s From Total:s
              POST-ACCUM 
                          IF attr != "" THEN s.setAttr(attr, s.@score) END,
                          IF file_path != "" THEN f.println(s, s.@score) END,
                          IF print_accum THEN @@topScores += Vertex_Score(s, s.@score) END
              LIMIT output_limit;
                
        IF print_accum THEN
            PRINT @@topScores as top_scores;
        END;
}

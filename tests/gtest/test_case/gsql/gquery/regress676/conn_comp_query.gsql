CREATE QUERY conn_comp (SET<STRING> v_type, SET<STRING> e_type, INT output_limit, BOOL print_accum = TRUE, STRING attr = "", STRING file_path = "", BOOL test_mode = FALSE){
# This query identifies the Connected Components (undirected edges)

        MinAccum<INT> @cc_id = 0;       //each vertex's tentative component id
        MapAccum<INT, INT> @@compSizes;
        MapAccum<INT, SumAccum<INT>> @@test_map;
        FILE f("/tmp/fake");
  
        Start = {v_type};

# Initialize: Label each vertex with its own internal ID
        S = SELECT x 
            FROM Start:x
            POST-ACCUM x.@cc_id = getvid(x)
                       ;

# Propagate smaller internal IDs until no more ID changes can be DOne
        WHILE (S.size()>0) DO
                S = SELECT t
                        FROM S:s -(e_type:e)-> :t
                        ACCUM t.@cc_id += s.@cc_id // If s has a smaller id than t, copy the id to t
                        HAVING t.@cc_id != t.@cc_id'
                        ;
        END;
  
      IF file_path != "" THEN
          f.println("Vertex_ID","Component_ID");
      END;
        
        Start = {v_type};
        Start = SELECT s FROM Start:s
                POST-ACCUM 
                    IF attr != "" THEN s.setAttr(attr, s.@cc_id) END,
                    IF print_accum or test_mode THEN @@compSizes += (s.@cc_id -> 1) END,
                    IF file_path != "" THEN f.println(s, s.@cc_id) END
                LIMIT output_limit;
      
      IF print_accum THEN
          PRINT @@compSizes as sizes;
          PRINT Start[Start.@cc_id];
      END;
  
      IF test_mode THEN
          FOREACH (k, v) IN @@compSizes DO
            @@test_map += (v -> 1);
          END;
          PRINT @@test_map;
      END;
}
